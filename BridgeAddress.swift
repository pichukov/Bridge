//
//  BridgeAddress.swift
//  Bridge
//
//  Created by Alexey Pichukov on 27/09/2019.
//

import Foundation

/**
 * Contains the unique address representation for the Node in Bridge system
 *
 * - id: the unique UUID (by default) String or nil
 *   NOTE: use nil for Message that should be delivered to all the Nodes of the same Type (BridgeNodeTypable)
 *
 * - type: the Type of the Node (BridgeNodeTypable)
 */
infix operator |=
public struct BridgeNodeAddress<Type: BridgeNodeTypable> {
    
    private(set) var id: String?
    private(set) var type: Type
    
    /**
     Create the address with Type and custom ID
     */
    public init(withType type: Type, andId id: String) {
        self.type = type
        self.id = id
    }
    
    /**
     Create the address with Type and autogenerated UUID as ID
     */
    public init(withAutogeneratedIdAndType type: Type) {
        let id = UUID().uuidString
        self.init(withType: type, andId: id)
    }
    
    /**
     Create the address with only Type. The ID will be nil in that case
      NOTE: Use this constructor for creating Type delivery oriented messages
     */
    public init(withOnlyType type: Type) {
        self.type = type
        self.id = nil
    }
    
    /// Check that our address fits the destination address
    /// - lhs - our node address
    /// - rhs - destination address
    static func |= (lhs: BridgeNodeAddress, rhs: BridgeNodeAddress) -> Bool {
        guard lhs.type == rhs.type else { return false }
        guard let id = rhs.id else { return true }
        return lhs.id == id
    }
}
