//
//  ViewController.swift
//  Bridge
//
//  Created by pichukov on 09/27/2019.
//  Copyright (c) 2019 pichukov. All rights reserved.
//

import UIKit
import Bridge

class ViewController: UIViewController {

    @IBOutlet weak var orangeView: OrangeView!
    @IBOutlet weak var pinkView: PinkView!
    @IBOutlet weak var firstGeneralView: GeneralView!
    @IBOutlet weak var secondGeneralView: GeneralView!
    @IBOutlet weak var thirdGeneralView: GeneralView!
    
    private var bridgeNode: BridgeNode<EntityType>?
    private var count = 1
    
    override func viewDidLoad() {
        super.viewDidLoad()
        orangeView.initBridge()
        pinkView.initBridge()
        firstGeneralView.initBridge()
        secondGeneralView.initBridge()
        thirdGeneralView.initBridge()
        
        bridgeNode = BridgeNode(withAddress: BridgeNodeAddress<EntityType>(withAutogeneratedIdAndType: .root), delegate: self)
        
        bridgeNode!.add(node: orangeView!.connect(node: bridgeNode!))
        bridgeNode!.add(node: pinkView!.connect(node: bridgeNode!))
        bridgeNode!.add(node: firstGeneralView!.connect(node: bridgeNode!))
        bridgeNode!.add(node: secondGeneralView!.connect(node: bridgeNode!))
        bridgeNode!.add(node: thirdGeneralView!.connect(node: bridgeNode!))
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    @IBAction func allButtonAction(_ sender: Any) {
        guard bridgeNode != nil else { return }
        let message = BridgeMessage<EntityType>(fromSourse: bridgeNode!.address,
                                                toDestination: BridgeNodeAddress<EntityType>(withOnlyType: .general),
                                                withValue: UIColor.random)
        bridgeNode!.send(message: message)
    }
    
    @IBAction func orangeButtonAction(_ sender: Any) {
        guard bridgeNode != nil else { return }
        let message = BridgeMessage<EntityType>(fromSourse: bridgeNode!.address,
                                                toDestination: BridgeNodeAddress<EntityType>(withOnlyType: .orange),
                                                withValue: String(count))
        bridgeNode!.send(message: message)
        count += 1
    }
    
    @IBAction func pinkButtonAction(_ sender: Any) {
        guard bridgeNode != nil else { return }
        let message = BridgeMessage<EntityType>(fromSourse: bridgeNode!.address,
                                                toDestination: BridgeNodeAddress<EntityType>(withOnlyType: .pink),
                                                withValue: String(count))
        bridgeNode!.send(message: message)
        count += 1
    }
}

extension ViewController: BridgeCallable {
    
    func recieve<EntityType>(message: BridgeMessage<EntityType>) {
        
    }
    
}
